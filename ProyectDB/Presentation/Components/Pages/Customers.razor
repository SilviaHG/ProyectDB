@page "/customers"
@inject ICustomerRepository CustomerRepository
@inject NavigationManager Navigation

<h3 style="align-content: center; align-items:center; margin-left:380px;" >Lista de Clientes</h3>
@* Contenedor de los dos elementos en la misma fila *@
<div class="d-flex justify-content-between mb-4" style="margin-left:380px; width: 600px;">
    <!-- agregar -->
    <button style="height:55px" class="btn btn-success" type="button" @onclick="AddNewCustomer">
        <i class="bi bi-person-plus"></i> Nuevo Cliente
    </button>

    <!-- Campo de Búsqueda -->
    <div style="width:275px;">
        <input style="margin-left:310px" type="text" class="form-control" placeholder="Buscar cliente por cédula..." @bind="searchText" @oninput="SearchCustomer" @onkeydown="HandleKeyDown" />
    </div>

    <!--Boton de buscar-->
    <button style="margin-left:320px" class="btn btn-success mt-2" type="button" @onclick="SearchCustomer">
        <i class="bi bi-search"></i> Buscar
    </button>
</div>

  
<!-- Mensaje de Cargando -->
@if (clients == null)
{
    <div class="alert alert-info" role="alert">
        Cargando clientes, por favor espere...
    </div>
}
else
{
    <!-- Lista de Clientes -->
    <div class="list-group" style="width:750px; margin-left: 380px;">
        @foreach (var client in clients)
        {
            <div class="list-group-item d-flex justify-content-between align-items-center">
                <div>
                    <strong>@client.Name</strong><br />
                    <small class="text-muted">ID: @client.Id</small><br />
                    <small>Edad: @client.Age</small><br />
                    <small>Teléfono: @client.Phone</small><br />
                    <small>Dirección: @client.Address</small>
                </div>

                <!-- Botón Actualizar -->
                <button class="btn btn-warning btn-sm" style="margin-left:380px;" type="button" @onclick="() => Update(client)">
                    <i class="bi bi-trash"></i> Actualizar
                </button>
                <!-- Botón Eliminar -->
                <button class="btn btn-danger btn-sm" type="button" @onclick="() => Delete(client.Id)">
                    <i class="bi bi-trash"></i> Eliminar
                </button>

            </div>
        }
    </div>
}


@code {
    private Customer customer;
    private IEnumerable<Customer> clients;
    private string searchText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        clients = await GetCustomersAsync();
    }

    private async Task<IEnumerable<Customer>> GetCustomersAsync()
    {
        return await CustomerRepository.GetCustomersAsync();
    }

    private void AddNewCustomer()
    {
        Navigation.NavigateTo("/add-customer");
    }
    private async Task Delete(int id)
    {
        await CustomerRepository.DeleteCustomerAsync(id);
        // Recargar la lista de clientes después de la eliminación
        clients = await CustomerRepository.GetCustomersAsync();
    }
    private async Task Update(Customer client)
    {
        Navigation.NavigateTo($"/add-customer/{client.Id}");
    }
    private async Task SearchCustomer()
    {
        if (string.IsNullOrEmpty(searchText))
        {
            // Si el campo de búsqueda está vacío, mostramos toda la lista de clientes
            clients = await CustomerRepository.GetCustomersAsync();
        }
        else
        {
            // Si hay texto, filtramos la lista de clientes por cédula (ID)
            clients = await CustomerRepository.GetCustomersAsync();
            clients = clients.Where(c => c.Id.ToString().Contains(searchText)); // Filtrar por cédula (ID)
        }
    }

    //al dar enter que busque
    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchCustomer(); 
        }
    }

}
