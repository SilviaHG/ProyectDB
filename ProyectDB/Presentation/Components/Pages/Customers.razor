@page "/customers"
@inject ICustomerRepository CustomerRepository
@inject NavigationManager Navigation

<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet" />


<h3 style="align-content: center; align-items:center; margin:auto; max-width:500px;" >Lista de Clientes</h3>
@* Contenedor de los dos elementos en la misma fila *@
<div class="d-flex justify-content-between align-items-center mb-4" style="max-width: 500px; margin: 0 auto;">

    <!-- Botón de Agregar -->
    <button class="btn btn-success" @onclick="AddNewCustomer">
        <i class="bi bi-person-plus"></i>
    </button>

    <!-- Campo de Búsqueda -->
    <div class="d-flex">
        <input style="width: 275px;"
        type="text"
        class="form-control"
        placeholder="Buscar cliente por cédula..."
        @bind="searchText"
               @oninput="OnInputChange"
         />

        <!-- Botón de Buscar -->
        <button class="btn btn-success ml-2"
        type="button"
        @onclick="SearchCustomer">
            <i class="bi bi-search"></i>
        </button>
    </div>

</div>

<!-- Mensaje de Cargando -->
@if (clients == null)
{
    <div class="alert alert-info" role="alert">
        Cargando clientes, por favor espere...
    </div>
}
else if (!clients.Any())
{
    <div class="alert alert-info" role="alert">
        No hay clientes para mostrar.
    </div>
}
else
{
    <!-- Lista de Clientes -->
    <div class="list-group" style="width:500px; margin: auto;">
        @foreach (var client in clients.Skip((currentPage -1) * pageSize).Take(pageSize))
        {
            <div @ondblclick="() => Edit(client)" class=" list-group-item d-flex justify-content-between align-items-center">
                <div>
                    <strong>@client.Name</strong><br />
                    <small class="text-muted">ID: @client.Id</small><br />
                    <small>Edad: @client.Age</small><br />
                    <small>Teléfono: @client.Phone</small><br />
                    <small>Dirección: @client.Address</small>
                </div>

                <!-- Botón Eliminar -->
                <button class="btn btn-danger btn-sm" type="button" @onclick="() => ShowModalConfirm(client)">
                    <i class="bi bi-trash"></i>
                </button>

            </div>
        }
    </div>
}


<Modal @ref="modal"></Modal>




<br />
<div class="d-flex justify-content-center">
    <button class="btn btn-primary" @onclick="GoToPreviousPage" disabled="@(!HasPreviousPage())"><i class="bi bi-arrow-left-circle"></i></button>
    <span class="mx-2">Página @currentPage de @totalPages</span>
    <button style="color:white;" class="btn btn-primary" @onclick="GoToNextPage" disabled="@(!HasNextPage())"><i class="bi bi-arrow-right-circle"></i></button>
</div>

@code {

    private Customer customer;
    private IEnumerable<Customer> clients;
    private string searchText = string.Empty;

    //pagination 
    private int pageSize = 3;  
    private int currentPage = 1;  
                                  
    private int totalItems => clients?.Count() ?? 0;  
    private int totalPages => totalItems > 0 ? (int)Math.Ceiling((double)totalItems / pageSize) : 1;

    //buscar   
    private Debouncer<string> _searchDebouncer;


    //modal
    private Modal modal;

    protected override async Task OnInitializedAsync()
    {
        clients = await GetCustomersAsync();  // Obtenemos la lista completa de clientes
        _searchDebouncer = new Debouncer<string>(async (value) =>
        {
            // Lógica de búsqueda
            if (string.IsNullOrEmpty(value))
            {
                clients = await GetCustomersAsync();  // Vuelve a cargar todos los clientes si no hay texto
            }
            else
            {
                if (int.TryParse(value, out int searchID))
                {
                    var allClients = await GetCustomersAsync();
                    clients = allClients.Where(c => c.Id == searchID).ToList();  // Filtrar por ID
                }
                else
                {
                    clients = Enumerable.Empty<Customer>();  // Si no es un número, no muestra resultados
                }
            }

            // Resetear a la primera página después de la búsqueda
            currentPage = 1;

            

            // Actualizar la UI
            InvokeAsync(StateHasChanged);
        }, 750);  // 750 ms de retardo
        
    }

    private async Task<IEnumerable<Customer>> GetCustomersAsync()
    {
        return await CustomerRepository.GetCustomersAsync();
    }

    private void AddNewCustomer()
    {
        Navigation.NavigateTo("/add-customer");
    }

    private void ShowModalConfirm(Customer client)
    {
        modal.OpenModal(client);
    }

    private async Task SearchCustomer()
    {
        if (string.IsNullOrEmpty(searchText))
        {
            // Si el campo de búsqueda está vacío, mostramos toda la lista de clientes
            clients = await CustomerRepository.GetCustomersAsync();
        }
        else
        {
            if(int.TryParse(searchText, out int searchID)){
                //  filtramos la lista de clientes por cédula 
                var allclients = await CustomerRepository.GetCustomersAsync();
                clients = allclients.Where(c => c.Id == searchID).ToList(); // Filtrar por cédula
            }else{
                // Si no se puede convertir a número, no filtramos nada
                clients = Enumerable.Empty<Customer>();
            }

        }
        // Después de buscar, que vuelva a la primer pagina
        currentPage = 1;  

    }

    //al dar enter que busque
    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchCustomer(); 
        }
    }

    private void Edit(Customer client){
        Navigation.NavigateTo($"/add-customer/{client.Id}");
    }

    private void GoToNextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
        }
    }

    private void GoToPreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
        }
    }

    //  si hay una página anterior
    private bool HasPreviousPage() => currentPage > 1;

    //  si hay una página siguiente
    private bool HasNextPage() => currentPage < totalPages;

    private async Task OnInputChange(ChangeEventArgs evt)
    {
        _searchDebouncer.Trigger(evt.Value.ToString());
    }


       

}


