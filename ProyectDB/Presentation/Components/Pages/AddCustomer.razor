@page "/add-customer/{CustomerId:int?}"

@inject ICustomerRepository CustomerRepository
@inject NavigationManager Navigation

<p style="color: black; font-size: 25px">Ingresa los datos del cliente</p>

@if (showMessage)
{
    <p style="color:red;">Está cédula ya existe, ingrese los datos nuevamente</p>
}

<CustomerForm Customer="newCustomer" OnSubmit="AddCustomers" >

    <button class="btn btn-secondary" type="button" @onclick ="Cancelar" >Cancelar</button>

</CustomerForm>

@code {

    private bool showMessage = false;
    private Customer newCustomer = new Customer();
    [Parameter] public int? CustomerId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if(CustomerId.HasValue)
        {
            newCustomer = await CustomerRepository.GetCustomerByIdAsync(CustomerId.Value);
        }
        else
        {
            newCustomer = new Customer();
        }
    }

    private async Task AddCustomers()
    {

        if(newCustomer.Id > 0)
        {
            await CustomerRepository.UpdateCustomerAsync(newCustomer);
        }
        else
        {
            await CustomerRepository.AddCustomerAsync(newCustomer);
        }
           
            Navigation.NavigateTo("/customers");
    }


    private async Task OnCedulaChanged(ChangeEventArgs e)
    {
        var cedula = e.Value?.ToString(); // Obtener la cédula del evento

        if (!string.IsNullOrEmpty(cedula))
        {

            var existingCustomer = await CustomerRepository.GetCustomerByIdAsync(newCustomer.Id);

            if (existingCustomer != null)
            {

                newCustomer = existingCustomer;
                showMessage = true; 
            }
            else
            {
                //creamos un nuevo clientes
                await AddCustomers();
                Navigation.NavigateTo("/customers");
            }
        }
    }
    private void Cancelar()
    {
        //enviar al formulario de customer
        Navigation.NavigateTo("/customers");
    }

}
